// b5e736b9ffe28a2aa3aee66ba6788251
// autogenerated file

#include "amotor/amotor.h"
#include "amotor/amotor-fabric.h"
#include <fbt/helper.hpp>

static const string64_t _defvalue_FBCLASS = "AMOTOR";
static const string64_t _defvalue_FBVERSION = "0.0.0.1";
static const string64_t _defvalue_FBNAME = "";
static const lreal_t _defvalue_qufa = 1.0;
static const bool_t _defvalue_round = 0;
static const lint_t _defvalue_mode = 0;
static const bool_t _defvalue_in = 0;
static const bool_t _defvalue_pin = 0;
static const lint_t _defvalue_delta = 1;
static const lint_t _defvalue_min = 0;
static const lint_t _defvalue_max = 0;
static const bool_t _defvalue_ud = 0;
static const bool_t _defvalue_reset = 0;
static const bool_t _defvalue_clr = 0;
static const bool_t _defvalue_hold = 0;
static const lint_t _defvalue_count = 0;
static const lint_t _defvalue_cumcount = 0;
static const lint_t _defvalue_pcum = 0;
static const bool_t _defvalue_lim = 0;

std::vector<ParameterInfo> AMOTOR_Fabric::GetParametersInfo() const {
    return {
        {"FBCLASS", IParameter::Qualifier::kConst, IParameter::Type::kString64, &_defvalue_FBCLASS},
        {"FBVERSION", IParameter::Qualifier::kConst, IParameter::Type::kString64, &_defvalue_FBVERSION},
        {"FBNAME", IParameter::Qualifier::kConst, IParameter::Type::kString64, &_defvalue_FBNAME},
        {"qufa", IParameter::Qualifier::kMutable, IParameter::Type::kLreal, &_defvalue_qufa},
        {"round", IParameter::Qualifier::kMutable, IParameter::Type::kBool, &_defvalue_round},
        {"mode", IParameter::Qualifier::kMutable, IParameter::Type::kLint, &_defvalue_mode},
        {"in", IParameter::Qualifier::kMutable, IParameter::Type::kBool, &_defvalue_in},
        {"pin", IParameter::Qualifier::kMutable, IParameter::Type::kBool, &_defvalue_pin},
        {"delta", IParameter::Qualifier::kMutable, IParameter::Type::kLint, &_defvalue_delta},
        {"min", IParameter::Qualifier::kMutable, IParameter::Type::kLint, &_defvalue_min},
        {"max", IParameter::Qualifier::kMutable, IParameter::Type::kLint, &_defvalue_max},
        {"ud", IParameter::Qualifier::kMutable, IParameter::Type::kBool, &_defvalue_ud},
        {"reset", IParameter::Qualifier::kMutable, IParameter::Type::kBool, &_defvalue_reset},
        {"clr", IParameter::Qualifier::kMutable, IParameter::Type::kBool, &_defvalue_clr},
        {"hold", IParameter::Qualifier::kMutable, IParameter::Type::kBool, &_defvalue_hold},
        {"count", IParameter::Qualifier::kMutable, IParameter::Type::kLint, &_defvalue_count},
        {"cumcount", IParameter::Qualifier::kMutable, IParameter::Type::kLint, &_defvalue_cumcount},
        {"pcum", IParameter::Qualifier::kMutable, IParameter::Type::kLint, &_defvalue_pcum},
        {"lim", IParameter::Qualifier::kMutable, IParameter::Type::kBool, &_defvalue_lim},
    };
}

TechDataInfo AMOTOR_Fabric::GetRetainInfo() const {
    return {Helper::Version2Lword("0.0.0.1"), AMOTOR::TechDataSize()};
}

FunctionBlockInfo AMOTOR_Fabric::GetFbInfo() const {
    return {"AMOTOR", Helper::Version2Lword("0.0.0.1")};
}

std::unique_ptr<IFunctionBlock> AMOTOR_Fabric::CreateBlock(IFunctionalBlockData& data) {
    return std::make_unique<AMOTOR>(data);
}
