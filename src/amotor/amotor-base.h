// b5e736b9ffe28a2aa3aee66ba6788251
// autogenerated file

#pragma once

#include <fbt/ifunction-block-data.hpp>
#include <fbt/ifunction-block.hpp>

class AMOTOR_Base : public IFunctionBlock {
public:
    AMOTOR_Base(IFunctionalBlockData& storage)
        : FBCLASS (storage.GetConstParameter("FBCLASS"))
        , FBVERSION (storage.GetConstParameter("FBVERSION"))
        , FBNAME (storage.GetConstParameter("FBNAME"))
        , qufa (storage.GetMutableParameter("qufa"))
        , round (storage.GetMutableParameter("round"))
        , mode (storage.GetMutableParameter("mode"))
        , in (storage.GetMutableParameter("in"))
        , pin (storage.GetMutableParameter("pin"))
        , delta (storage.GetMutableParameter("delta"))
        , min (storage.GetMutableParameter("min"))
        , max (storage.GetMutableParameter("max"))
        , ud (storage.GetMutableParameter("ud"))
        , reset (storage.GetMutableParameter("reset"))
        , clr (storage.GetMutableParameter("clr"))
        , hold (storage.GetMutableParameter("hold"))
        , count (storage.GetMutableParameter("count"))
        , cumcount (storage.GetMutableParameter("cumcount"))
        , pcum (storage.GetMutableParameter("pcum"))
        , lim (storage.GetMutableParameter("lim"))
    { }

protected:
    // параметры
    const IParameter& FBCLASS; // {'name': 'FBCLASS', 'type': 'string64', 'value': 'AMOTOR', 'description': 'FB type name'}
    const IParameter& FBVERSION; // {'name': 'FBVERSION', 'type': 'string64', 'value': '0.0.0.1', 'description': 'FB version'}
    const IParameter& FBNAME; // {'name': 'FBNAME', 'spec': ['conf'], 'type': 'string64', 'value': '', 'description': 'instance name'}
     IParameter& qufa; // {'name': 'qufa', 'spec': 'set', 'type': 'lreal', 'value': 1.0, 'description': {'strings': 'qufa_descr'}}
     IParameter& round; // {'name': 'round', 'spec': 'set', 'type': 'bool', 'value': 0, 'description': {'strings': 'round_descr'}}
     IParameter& mode; // {'name': 'mode', 'spec': 'set', 'type': 'lint', 'value': 0, 'description': {'strings': 'mode_descr'}}
     IParameter& in; // {'name': 'in', 'spec': 'input', 'type': 'bool', 'value': 0, 'description': {'strings': 'in_descr'}}
     IParameter& pin; // {'name': 'pin', 'spec': 'set', 'type': 'bool', 'value': 0, 'description': {'strings': 'pin_descr'}}
     IParameter& delta; // {'name': 'delta', 'spec': 'set', 'type': 'lint', 'value': 1, 'description': {'strings': 'delta_descr'}}
     IParameter& min; // {'name': 'min', 'spec': 'set', 'type': 'lint', 'value': 0, 'description': {'strings': 'min_descr'}}
     IParameter& max; // {'name': 'max', 'spec': 'set', 'type': 'lint', 'value': 0, 'description': {'strings': 'max_descr'}}
     IParameter& ud; // {'name': 'ud', 'spec': 'set', 'type': 'bool', 'value': 0, 'description': {'strings': 'ud_descr'}}
     IParameter& reset; // {'name': 'reset', 'spec': 'input', 'type': 'bool', 'value': 0, 'description': {'strings': 'reset_descr'}}
     IParameter& clr; // {'name': 'clr', 'spec': 'input', 'type': 'bool', 'value': 0, 'description': {'strings': 'clr_descr'}}
     IParameter& hold; // {'name': 'hold', 'spec': 'input', 'type': 'bool', 'value': 0, 'description': {'strings': 'hold_descr'}}
     IParameter& count; // {'name': 'count', 'spec': 'output', 'type': 'lint', 'value': 0, 'description': {'strings': 'count_descr'}}
     IParameter& cumcount; // {'name': 'cumcount', 'spec': 'output', 'type': 'lint', 'value': 0, 'description': {'strings': 'cumcount_descr'}}
     IParameter& pcum; // {'name': 'pcum', 'spec': 'output', 'type': 'lint', 'value': 0, 'description': {'strings': 'pcum_descr'}}
     IParameter& lim; // {'name': 'lim', 'spec': 'output', 'type': 'bool', 'value': 0, 'description': {'strings': 'lim_descr'}}
};